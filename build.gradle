// tag::versions[]
buildscript {
	dependencies {
		apply from: "versions.gradle"

		classpath "io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE"
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
		classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11'
		classpath 'com.moowork.gradle:gradle-node-plugin:1.1.1'
		classpath 'org.ajoberstar:gradle-git-publish:0.2.1'
		classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5-rc1'
		classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.1'
		classpath 'net.ltgt.gradle:gradle-apt-plugin:0.10'
		classpath 'io.crnk:crnk-gen-typescript:2.4.20180123045519'
		classpath 'com.bmuschko:gradle-docker-plugin:3.2.0'
		classpath "org.ajoberstar:gradle-git:1.7.2"
	}
}

wrapper {
	gradleVersion = '4.3'
}

// note that a production build creates javadoc, sources jars and signatures undesired during development
// for performance reasons
def isProductionBuild = System.env.NEXUS_DEPLOY_USER != null
ext {
	timestampedVersion = isProductionBuild
}

apply plugin: 'org.ajoberstar.grgit'
def gitCommitTimestamp = grgit.head().date.format("yyyyMMddHHmmss")
version = BUILD_VERSION_PREFIX + "." + gitCommitTimestamp
group = GROUP_ID

if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}

gradle.beforeProject { Project project ->
	project.with {
		apply plugin: "eclipse"

		apply plugin: 'io.spring.dependency-management'
		dependencyManagement {
			imports {
				mavenBom 'org.springframework.boot:spring-boot-dependencies:1.5.8.RELEASE'
				mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Dalston.SR4'
			}
		}
	}

}

