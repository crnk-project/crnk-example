buildscript {
    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11'
        classpath 'org.ajoberstar:gradle-git-publish:0.2.1'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5-rc1'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.1'
        classpath 'net.ltgt.gradle:gradle-apt-plugin:0.10'
        classpath "org.ajoberstar:gradle-git:1.7.2"
        classpath 'com.google.cloud.tools.jib:com.google.cloud.tools.jib.gradle.plugin:1.0.0-rc1'
        classpath "io.crnk:crnk-gen-gradle:$CRNK_VERSION"

    }
}

plugins {
    id "com.github.rmee.jdk-bootstrap" version "1.0.20190725142159"
    id "com.github.rmee.kubectl" version "1.0.20190725142159"
    id "com.github.rmee.helm" version "1.0.20190725142159"
    id "com.github.rmee.gcloud" version "1.0.20190725142159"
}

wrapper {
    gradleVersion = '5.5'
}

apply plugin: 'jdk-bootstrap'
jdk {
    useAdoptOpenJdk8(JDK_VERSION)
}

// note that a production build creates javadoc, sources jars and signatures undesired during development
// for performance reasons
def isProductionBuild = System.env.NEXUS_DEPLOY_USER != null
ext {
    timestampedVersion = isProductionBuild
}

apply plugin: 'org.ajoberstar.grgit'
def gitCommitTimestamp = grgit.head().date.format("yyyyMMddHHmmss")
version = BUILD_VERSION_PREFIX + "." + gitCommitTimestamp
group = GROUP_ID

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            // options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}
