import com.bmuschko.gradle.docker.tasks.image.DockerTagImage

apply plugin: 'java'
tasks.withType(Jar) { jar ->
	jar.version = null
}


apply plugin: 'application'

mainClassName = "io.crnk.example.service.ExampleApplication"

def crnkVersion = versions['crnk.version']

dependencies {

	compile "io.crnk:crnk-rs:${crnkVersion}"
	compile "io.crnk:crnk-spring:${crnkVersion}"
	compile "io.crnk:crnk-jpa:${crnkVersion}"
	compile "io.crnk:crnk-validation:${crnkVersion}"
	compile "io.crnk:crnk-home:${crnkVersion}"
	compile "io.crnk:crnk-ui:${crnkVersion}"
	compile "io.crnk:crnk-operations:${crnkVersion}"
	compile "io.crnk:crnk-security:${crnkVersion}"

	compile 'org.springframework.boot:spring-boot-starter-data-jpa'
	compile 'org.springframework.boot:spring-boot-starter-web'
	compile 'org.springframework.boot:spring-boot-starter-actuator'
	compile 'org.springframework.cloud:spring-cloud-starter-sleuth'

	compile 'org.hibernate:hibernate-core'
	compile 'com.h2database:h2'
	compile 'commons-io:commons-io:1.3.2'

	compile project(':crnk-example-frontend')

	testCompile 'org.springframework.boot:spring-boot-starter-test'
	testCompile "io.crnk:crnk-client:${crnkVersion}"
	testCompile 'com.squareup.okhttp3:okhttp:3.4.1'
	testCompile 'com.jayway.restassured:rest-assured:2.9.0'
	testCompile 'com.jayway.restassured:json-schema-validator:2.9.0'
}

distZip.dependsOn ':crnk-example-frontend:assemble'
distTar.dependsOn ':crnk-example-frontend:assemble'

apply plugin: 'com.bmuschko.docker-java-application'

dockerDistTar {
	environmentVariable('JAVA_OPTS', '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap')
}

docker {
	javaApplication {
		baseImage = 'anapsix/alpine-java'
		maintainer = '"remo@adnovum.ch"'
		ports = [8080]
		tag = "crnk/example:$project.version"
		exec {
			entryPoint "/crnk-example-service/bin/crnk-example-service"
			defaultCommand 'run'
		}
	}

	registryCredentials {
		email = 'remo@adnovum.ch'
		username = dockerHubUser
		password = dockerHubPass
	}
}


task dockerTagLatest(type: DockerTagImage) {
	dependsOn dockerBuildImage
	force = true
	imageId = dockerBuildImage.getTag()
	repository = 'crnk/example'
	tag = "latest"
}

dockerPushImage{
	dependsOn dockerTagLatest
	tag = "latest"
}

